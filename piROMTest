#!/usr/bin/env bash

function displayHelp {
	printf "Usage: %s -s SYSTEM [OPTIONS]\n\n" $0
	printf "    Attempt to run each ROM for the given SYSTEM and CORE and output a Pass/Fail status.\n"
	printf "This script does not prove the specified ROM runs correctly, just that the specified\n"
	printf "CORE can run it. It is assumed SYSTEM configs are under /opt/retropie/configs and\n"
	printf "ROM's are under /home/pi/RetroPie/roms. For best results execute this script from an\n"
	printf "ssh session as the console will be used for the ROM display.\n"
	printf "\n"
	printf "SYSTEM\n"
	printf "    RetroPie system name. The following are supported:\n"
	printf "\tarcade - Configuration files located under /opt/retropie/configs/arcade\n"
	printf "\tfba - Configuration files located under /opt/retropie/configs/fba\n"
	printf "\tmame-libretro - Configuration files located under /opt/retropie/configs/mame-libretro\n"
	printf "\n"
	printf "OPTIONS\n"
	printf "\t-v\tUse verbose logging when running the cores.\n"
	printf "\t-l\tList the supported cores for the specified system.\n"
	printf "\t-c CORE\tForce the core used for all ROM's. If this option is not specified, the\n"
	printf "\t\tdefault core for the system will be used.\n"
	printf "\t-d SEC\tChange the emulator start delay to SEC seconds. If this option is not\n"
	printf "\t\tspecified, the default delay is 10 seconds.\n"
	printf "\n"
	printf "WARNING: Some ROM's which fail to run may be BIOS files. Removing them may cause\n"
	printf "multiple ROM's to fail. These ROM's should be moved to /home/pi/RetroPie/BIOS.\n"
	printf "\n"
}

function getEmulators {

	# Manipulate the emulators.cfg file for the given system so we can source it.
	# Remove dashes (-) up to the equals (=) sign
	awk '{ gsub("-", "", $1) } 1' FS='=' OFS='=' /opt/retropie/configs/$1/emulators.cfg > emulators.tmp
	# Remove spaces up to the first quote (")
	awk '{ gsub(" ", "", $1) } 1' FS='"' OFS='"' emulators.tmp > emulators.tmp1

	# Replace %ROM% with %s for rom file name insertion later
	if [ $verbose == 0 ]
	then
		cat emulators.tmp1 | sed s/%ROM%/%s/ > emulators.sh
	else
		cat emulators.tmp1 | sed "s/%ROM%/-v %s/" > emulators.sh
	fi
	rm emulators.tmp emulators.tmp1

	source emulators.sh

	# Remove any dashes from the name of the default core
	# We can't do this above because the dash is on the right side of the equals (=) sign
	default=${default/-}
}

mkdir -p /tmp/retroarch

# Set initial values
system=""
core="Auto"
verbose=0
listCores=0
startDelay=10

# If no parameters are passed, display the help
if [ $# == 0 ]
then
	displayHelp
	exit
fi

# Process command line parameters
while [ "$1" != "" ]
do
        arg=$1

        case $arg in
                -v)
			verbose=1
                        shift
                        ;;
                -s)
                        shift
                        system="$1"
                        shift
                        ;;
                -c)
                        shift
                        core="$1"
                        shift
                        ;;
		-l)
                        shift
			listCores=1;
			;;
		-d)
			shift
			startDelay=$1
			shift
			;;
                -h)
                        displayHelp
                        exit
                        ;;
                *)
                        echo "$arg   :    Unknown parameter."
                        exit
                        ;;
        esac
done

if [ "$system" == "" ]
then
	printf "ERROR: You must specify a SYSTEM\n"
	exit
elif [ ! -e /opt/retropie/configs/$system/emulators.cfg ]
then
	printf "ERROR: Could not find emulators.cfg under /opt/retropie/configs/$system\n"
	exit
fi

if [ $listCores != 0 ]
then
	printf "The following cores are supported for this SYSTEM:\n"
	cat /opt/retropie/configs/$system/emulators.cfg | sed s/=.*// | sed /^$/d | sed s/-//g
	exit
fi

getEmulators $system

# If "default" was specified for the core, get the value of the default core from emulators.sh
if [ "$core" == "default" ]
then
	core=$default
fi

echo "System : $system"
echo "Core   : $core"
echo "ROM's  : /home/pi/RetroPie/roms/$system"
if [ "$core" != "Auto" ]
then
	echo "CmdLine: ${!core}"
else
	echo "CmdLine: Auto"
fi
echo
echo "Testing ROM's:"

OIFS="$IFS"
IFS=$'\n'
for file in `ls -1 /home/pi/RetroPie/roms/$system/*.zip`
do
	# Strip the path and suffix from the ROM name
	rom=`basename -s .zip $file`

	if [ "$core" == "Auto" ]
	then
		# Search for $system_$rom in /opt/retropie/configs/all/emulators.cfg
		# If we can't find it, use the default for this system, otherwise
		# use what we found.
		# TODO
		tmp=`grep "${system}_${rom} =" /opt/retropie/configs/all/emulators.cfg`
		if [ "$tmp" != "" ]
		then
			tmp=`echo $tmp | sed "s/.* =//" | tr -d "-" | tr -d "\"" | tr -d " "`
		else
			tmp=$default
		fi
		printf "%-8s (%s) - " $rom $tmp
		cmd=${!tmp}
	else
		printf "%-8s (%s) - " $rom $core
		cmd=${!core}
	fi

	IFS="$OIFS"
	# Run the core in background so this script can continue to run
	cmd=${cmd/\%s/\"${file}\"}
	eval "$cmd &"
	# Capture the PID of the core process
	pid=$!
	IFS=$'\n'

	# Wait for the game to start for fail. 5 seconds should be enough.
	sleep $startDelay

	# Try to kill the core process. If this fails, it wasn't running
	kill -s 2 $pid > /dev/null 2>&1

	if [ $? != 0 ]
	then
		printf "Fail\n"
	else
		printf "Pass\n"
	fi
	# Wait for the process to exit
	wait $pid > /dev/null 2>&1
done
IFS="$OIFS"

