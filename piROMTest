#!/usr/bin/env bash

function displayHelp {
	printf "Usage: %s -s SYSTEM [OPTIONS]\n\n" $0
	printf "    Attempt to run each ROM for SYSTEM and output a Pass/Fail status.\n"
	printf "This script does not prove the specified ROM runs correctly, just that\n"
	printf "it can run. For best results execute this script from an ssh session\n"
	printf "as the console will be used for the ROM display.\n"
	printf "\n"
	printf "SYSTEM\n"
	printf "    RetroPie system name. The following systems are supported:\n"
	printf "\tarcade\n"
	printf "\tdreamcast\n"
	printf "\tfba\n"
	printf "\tmame-libretro\n"
	printf "\tmegadrive\n"
	printf "\tnes\n"
	printf "\tpsx\n"
	printf "\tsnes\n"
	printf "\tzxspectrum\n"
	printf "\n"
	printf "OPTIONS\n"
	printf "\t-v\tUse verbose logging when running the cores (libretro cores only).\n"
	printf "\t-l\tList the supported cores for SYSTEM.\n"
	printf "\t-c CORE\tForce CORE for all ROM's.\n"
	printf "\t-d SEC\tChange the ROM start delay to SEC seconds. If this option is not\n"
	printf "\t\tspecified, the default delay is 10 seconds.\n"
	printf "\t-e EXT\tLook for ROM's with a .EXT extension instead of the default .zip\n"
	printf "\t\textension.\n"
	printf "\t-p PATH\tPath to the ROM's. If not specified, /home/pi/RetroPie/roms/SYSTEM\n"
	printf "\t\tis assumed.\n"
	printf "\n"
	printf "WARNING: Some ROM's which fail to run may be BIOS files. Removing them may cause\n"
	printf "multiple ROM's to fail. These ROM's should be moved to /home/pi/RetroPie/BIOS.\n"
	printf "\n"
}

function getEmulators {

	# Manipulate the emulators.cfg file for the given system so we can source it.
	# Remove dashes (-) up to the equals (=) sign
	awk '{ gsub("-", "", $1) } 1' FS='=' OFS='=' /opt/retropie/configs/$1/emulators.cfg > emulators.tmp
	# Remove spaces up to the first quote (")
	awk '{ gsub(" ", "", $1) } 1' FS='"' OFS='"' emulators.tmp > emulators.sh
	rm emulators.tmp

	source emulators.sh

	# Remove any dashes from the name of the default core
	# We can't do this above because the dash is on the right side of the equals (=) sign
	default=`echo $default | tr -d "-"`
}


# Set initial values
extension="zip"
ROMPath=""
system=""
core="Auto"
verbose=0
listCores=0
startDelay=10
cacheDir="/tmp/retroarch" # should match the cache directory configured in retroarch.cfg

# Create the cache directory
mkdir -p $cacheDir

# If no parameters are passed, display the help
if [ $# == 0 ]
then
	displayHelp
	exit
fi

# Process command line parameters
while [ "$1" != "" ]
do
        case $1 in
                -v)
			verbose=1
                        shift
                        ;;
                -s)
                        shift
                        system="$1"
                        shift
                        ;;
                -c)
                        shift
                        core="$1"
                        shift
                        ;;
		-l)
                        shift
			listCores=1;
			;;
		-d)
			shift
			startDelay=$1
			shift
			;;
		-e)
			shift
			extension=$1
			shift
			;;
		-p)
			shift
			ROMPath=$1
			shift
			;;
                -h)
                        displayHelp
                        exit
                        ;;
                *)
                        echo "$1   :    Unknown parameter."
                        exit
                        ;;
        esac
done

if [ "$system" == "" ]
then
	printf "ERROR: You must specify a SYSTEM\n"
	exit
elif [ ! -e /opt/retropie/configs/$system/emulators.cfg ]
then
	printf "ERROR: Could not find emulators.cfg under /opt/retropie/configs/$system\n"
	exit
fi

if [ $listCores != 0 ]
then
	printf "The following cores are supported for this SYSTEM:\n"
	cat /opt/retropie/configs/$system/emulators.cfg | sed s/=.*// | sed /^$/d | sed s/-//g
	exit
fi

getEmulators $system

# If "default" was specified for the core, get the value of the default core from emulators.sh
if [ "$core" == "default" ]
then
	core=$default
fi

if [ "$ROMPath" == "" ]
then
	ROMPath="/home/pi/RetroPie/roms/$system"
fi

echo "System : $system"
echo "Core   : $core"
echo "ROM's  : $ROMPath"
if [ "$core" != "Auto" ]
then
	echo "CmdLine: ${!core}"
else
	echo "CmdLine: Auto"
fi
echo
echo "Testing ROM's:"

OIFS="$IFS"
IFS=$'\n'
for file in `ls -1 $ROMPath/*.$extension`
do
	# Strip the path and suffix from the ROM name
	rom=`basename -s .$extension $file`

	if [ "$core" == "Auto" ]
	then
		# Search for $system_$rom in /opt/retropie/configs/all/emulators.cfg
		# If we can't find it, use the default for this system, otherwise
		# use what we found.
		tmp=`grep "${system}_${rom} =" /opt/retropie/configs/all/emulators.cfg`
		if [ "$tmp" != "" ]
		then
			# Strip everything left of "=" and remove dashes (-), quotes (") and spaces ( )
			tmp=`echo $tmp | sed "s/.* =//" | tr -d "-" | tr -d "\"" | tr -d " "`
		else
			tmp=$default
		fi
		printf "%-8s (%s) - " $rom $tmp
		cmd=${!tmp}
	else
		printf "%-8s (%s) - " $rom $core
		cmd=${!core}
	fi

	IFS="$OIFS"
	# Add the ROM name into the command line
	cmd=${cmd/\%ROM\%/\"${file}\"}
	# Check for verbose logging
	if [ $verbose != 0 ]
	then
		# This only works for retroarch cores
		cmd="$cmd --verbose"
	fi
	# Run the core in background so this script can continue to run
	eval "$cmd &"
	# Capture the PID of the background process
	pid=$!
	IFS=$'\n'

	# Wait for the ROM to start for fail.
	sleep $startDelay

	# Try to kill the core process. If this fails, it wasn't running
	kill -s 2 $pid > /dev/null 2>&1

	if [ $? != 0 ]
	then
		printf "Fail\n"
	else
		printf "Pass\n"
	fi
	# Wait for the process to exit
	wait $pid > /dev/null 2>&1
done
IFS="$OIFS"

# Cleanup the cache directory
rm -rf $cacheDir
